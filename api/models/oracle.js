const oracledb = require('oracledb');

// ===========================================
// MODELOS PARA ORACLE (BASE DE DATOS RELACIONAL)
// ===========================================
// Oracle se usa para: Datos corporativos, Empleados, Contabilidad, Reportes financieros

class OracleModels {
  
  // ===========================================
  // EMPLEADOS Y STAFF
  // ===========================================
  static async createEmployeesTable(connection) {
    const query = `
      CREATE TABLE employees (
        employee_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        first_name VARCHAR2(50) NOT NULL,
        last_name VARCHAR2(50) NOT NULL,
        email VARCHAR2(100) UNIQUE NOT NULL,
        phone VARCHAR2(20),
        position VARCHAR2(100) NOT NULL,
        department VARCHAR2(50) NOT NULL,
        hire_date DATE DEFAULT SYSDATE,
        salary NUMBER(10,2),
        status VARCHAR2(20) DEFAULT 'ACTIVE',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    // AQU√ç SE LLENA: INSERT INTO employees (first_name, last_name, email, position, department, salary) VALUES (...)
    return await connection.execute(query);
  }

  static async getAllEmployees(connection) {
    const query = 'SELECT * FROM employees WHERE status = \'ACTIVE\' ORDER BY hire_date DESC';
    const result = await connection.execute(query);
    return result.rows;
  }

  // ===========================================
  // CONTABILIDAD Y FINANZAS
  // ===========================================
  static async createFinancialRecordsTable(connection) {
    const query = `
      CREATE TABLE financial_records (
        record_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        transaction_type VARCHAR2(20) NOT NULL, -- 'INCOME', 'EXPENSE', 'INVESTMENT'
        amount NUMBER(12,2) NOT NULL,
        description VARCHAR2(500),
        category VARCHAR2(100),
        reservation_id NUMBER,
        transaction_date DATE DEFAULT SYSDATE,
        created_by VARCHAR2(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    // AQU√ç SE LLENA: INSERT INTO financial_records (transaction_type, amount, description, category) VALUES (...)
    return await connection.execute(query);
  }

  static async getFinancialSummary(connection, startDate, endDate) {
    const query = `
      SELECT 
        transaction_type,
        SUM(amount) as total_amount,
        COUNT(*) as transaction_count
      FROM financial_records 
      WHERE transaction_date BETWEEN :startDate AND :endDate
      GROUP BY transaction_type
    `;
    const result = await connection.execute(query, { startDate, endDate });
    return result.rows;
  }

  // ===========================================
  // INVENTARIO Y RECURSOS
  // ===========================================
  static async createInventoryTable(connection) {
    const query = `
      CREATE TABLE inventory (
        item_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        item_name VARCHAR2(200) NOT NULL,
        item_type VARCHAR2(50) NOT NULL, -- 'EQUIPMENT', 'SUPPLIES', 'VEHICLES'
        quantity NUMBER NOT NULL,
        unit_cost NUMBER(10,2),
        supplier VARCHAR2(200),
        purchase_date DATE,
        status VARCHAR2(20) DEFAULT 'AVAILABLE',
        location VARCHAR2(100),
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    // AQU√ç SE LLENA: INSERT INTO inventory (item_name, item_type, quantity, unit_cost, supplier) VALUES (...)
    return await connection.execute(query);
  }

  // ===========================================
  // REPORTES CORPORATIVOS
  // ===========================================
  static async createReportsTable(connection) {
    const query = `
      CREATE TABLE corporate_reports (
        report_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        report_type VARCHAR2(50) NOT NULL, -- 'MONTHLY', 'QUARTERLY', 'ANNUAL'
        report_name VARCHAR2(200) NOT NULL,
        report_data CLOB,
        generated_by VARCHAR2(100),
        generated_date DATE DEFAULT SYSDATE,
        status VARCHAR2(20) DEFAULT 'GENERATED'
      )
    `;
    
    // AQU√ç SE LLENA: INSERT INTO corporate_reports (report_type, report_name, report_data, generated_by) VALUES (...)
    return await connection.execute(query);
  }

  // ===========================================
  // CLIENTES CORPORATIVOS
  // ===========================================
  static async createCorporateClientsTable(connection) {
    const query = `
      CREATE TABLE corporate_clients (
        client_id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
        company_name VARCHAR2(200) NOT NULL,
        contact_person VARCHAR2(100),
        email VARCHAR2(100),
        phone VARCHAR2(20),
        address VARCHAR2(500),
        tax_id VARCHAR2(50),
        credit_limit NUMBER(12,2),
        payment_terms VARCHAR2(100),
        status VARCHAR2(20) DEFAULT 'ACTIVE',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `;
    
    // AQU√ç SE LLENA: INSERT INTO corporate_clients (company_name, contact_person, email, address) VALUES (...)
    return await connection.execute(query);
  }

  // ===========================================
  // FUNCIONES DE UTILIDAD
  // ===========================================
  static async initializeTables(connection) {
    console.log('üìä Inicializando tablas de Oracle...');
    
    try {
      await this.createEmployeesTable(connection);
      await this.createFinancialRecordsTable(connection);
      await this.createInventoryTable(connection);
      await this.createReportsTable(connection);
      await this.createCorporateClientsTable(connection);
      
      console.log('‚úÖ Tablas de Oracle creadas exitosamente');
    } catch (error) {
      console.error('‚ùå Error creando tablas de Oracle:', error);
      throw error;
    }
  }

  // Obtener resumen financiero
  static async getFinancialDashboard(connection) {
    try {
      const query = `
        SELECT 
          (SELECT SUM(amount) FROM financial_records WHERE transaction_type = 'INCOME' AND transaction_date >= TRUNC(SYSDATE, 'MM')) as monthly_income,
          (SELECT SUM(amount) FROM financial_records WHERE transaction_type = 'EXPENSE' AND transaction_date >= TRUNC(SYSDATE, 'MM')) as monthly_expenses,
          (SELECT COUNT(*) FROM employees WHERE status = 'ACTIVE') as active_employees,
          (SELECT COUNT(*) FROM corporate_clients WHERE status = 'ACTIVE') as active_clients
        FROM dual
      `;
      const result = await connection.execute(query);
      return result.rows[0];
    } catch (error) {
      console.error('‚ùå Error obteniendo dashboard financiero:', error);
      return null;
    }
  }
}

module.exports = OracleModels;
